[{"title":"React笔记","date":"2019-05-18T06:18:53.000Z","path":"2019/05/18/React笔记/","text":"React几个重要的概念 1. 几个重要概念理解 模块与组件 模块: 理解: 向外提供特定(局部)功能的js程序, 一般就是一个js文件 为什么: js代码更多更复杂 作用: 复用js, 简化js的编写, 提高js运行效率 组件: 理解: 用来实现特定功能效果的代码集合(html/css/js) 为什么: 一个界面的功能更复杂 作用: 复用编码, 简化项目编码, 提高运行效率 模块化与组件化 模块化: 当应用的js都以模块来编写的, 这个应用就是一个模块化的应用 组件化: 当应用是以多组件的方式实现功能, 这上应用就是一个组件化的应用 2. React的基本认识 Facebook开源的一个js库 一个用来动态构建用户界面的js库 React的特点 Declarative(声明式编码) Component-Based(组件化编码) Learn Once, Write Anywhere(支持客户端与服务器渲染) 高效 单向数据流 React高效的原因 虚拟(virtual)DOM, 不总是直接操作DOM(批量更新, 减少更新的次数) 高效的DOM Diff算法, 最小化页面重绘(减小页面更新的区域) 3. 使用React12* 导入相关js库文件(react.js, react-dom.js, babel.min.js)* 编码: var aa = 123 ReactDOM.render({aa}, containerDOM); 123456789101112131415```## 4. JSX- 全称: JavaScript XML - react定义的一种类似于XML的JS扩展语法: XML+JS - 作用: 用来创建react虚拟DOM(元素)对象 - js中直接可以套标签, 但标签要套js需要放在&#123;&#125;中 - 在解析显示js数组时, 会自动遍历显示 - 把数据的数组转换为标签的数组: var liArr = dataArr.map(function(item, index){ return &lt;li key={index}&gt;{item}&lt;/li&gt; }) 12345678 - 注意: - 标签必须有结束 - 标签的class属性必须改为className属性 - 标签的style属性值必须为: &#123;&#123;color:&apos;red&apos;, width:12&#125;&#125;## 5. Component : React是面向组件编程的(组件化编码开发) 基本理解和使用 自定义的标签: 组件类(函数)/标签 创建组件类 12345678910111213141516//方式1: 无状态函数(最简洁, 推荐使用)function MyComponent1() &#123; return &lt;h1&gt;自定义组件标题11111&lt;/h1&gt;;&#125;//方式2: ES6类语法(复杂组件, 推荐使用)class MyComponent3 extends React.Component &#123; render () &#123; return &lt;h1&gt;自定义组件标题33333&lt;/h1&gt;; &#125;&#125;//方式3: ES5老语法(不推荐使用了)var MyComponent2 = React.createClass(&#123; render () &#123; return &lt;h1&gt;自定义组件标题22222&lt;/h1&gt;; &#125;&#125;); 渲染组件标签 1ReactDOM.render(&lt;MyComp /&gt;, cotainerEle); ReactDOM.render()渲染组件标签的基本流程 React内部会创建组件实例对象/调用组件函数, 得到虚拟DOM对象 将虚拟DOM并解析为真实DOM 插入到指定的页面元素内部 props 所有组件标签的属性的集合对象 给标签指定属性, 保存外部数据(可能是一个function) 在组件内部读取属性: this.props.propertyName 作用: 从目标组件外部向组件内部传递数据 对props中的属性值进行类型限制和必要性限制1234Person.propTypes = &#123; name: React.PropTypes.string.isRequired, age: React.PropTypes.number.isRequired&#125; 扩展属性: 将对象的所有属性通过props传递 1&lt;Person &#123;...person&#125;/&gt; 组件的组合 组件标签中包含子组件标签 拆分组件: 拆分界面, 抽取组件 通过props传递数据 refs 组件内包含ref属性的标签元素的集合对象 给操作目标标签指定ref属性, 打一个标识 在组件内部获得标签对象: this.refs.refName(只是得到了标签元素对象) 作用: 操作组件内部的真实标签dom元素对象 事件处理 给标签添加属性: onXxx={this.eventHandler} 在组件中添加事件处理方法 123eventHandler(event) &#123; &#125; 使自定义方法中的this为组件对象 在constructor()中bind(this) 使用箭头函数定义方法(ES6模块化编码时才能使用) state 组件被称为”状态机”, 页面的显示是根据组件的state属性的数据来显示 初始化指定: 1234567constructor() &#123; super(); this.state = &#123; stateName1 : stateValue1, stateName2 : stateValue2 &#125;;&#125; 读取显示: this.state.stateName1 更新状态–&gt;更新界面 : this.setState({stateName1 : newValue}) 实现一个双向绑定的组件 React是单向数据流 需要通过onChange监听手动实现 组件生命周期 组件的三个生命周期状态: Mount：插入真实 DOM Update：被重新渲染 Unmount：被移出真实 DOM 生命周期流程: 第一次初始化显示 1234constructor()componentWillMount() : 将要插入回调render() : 用于插入虚拟DOM回调componentDidMount() : 已经插入回调 每次更新state 1234componentWillReceiveProps(): 接收父组件新的属性componentWillUpdate() : 将要更新回调render() : 更新(重新渲染)componentDidUpdate() : 已经更新回调 删除组件 12ReactDOM.unmountComponentAtNode(document.getElementById(&apos;example&apos;)) : 移除组件componentWillUnmount() : 组件将要被移除回调 常用的方法 123render(): 必须重写, 返回一个自定义的虚拟DOMconstructor(): 初始化状态, 绑定this(可以箭头函数代替)componentDidMount() : 只执行一次, 已经在dom树中, 适合启动/设置一些监听 12## 6. ajax React没有ajax模块 集成其它的js库(如axios/fetch/jQuery/), 发送ajax请求 axios 封装XmlHttpRequest对象的ajax promise 可以用在浏览器端和服务器 fetch 不再使用XmlHttpRequest对象提交ajax请求 fetch就是用来提交ajax请求的函数, 只是新的浏览才内置了fetch 为了兼容低版本的浏览器, 可以引入fetch.js 在哪个方法去发送ajax请求 只显示一次(请求一次): componentDidMount() 显示多次(请求多次): componentWillReceiveProps()1234567891011121314## 7. 虚拟DOM- 虚拟DOM是什么? - 一个虚拟DOM(元素)是一个一般的js对象, 准确的说是一个对象树(倒立的) - 虚拟DOM保存了真实DOM的层次关系和一些基本属性，与真实DOM一一对应 - 如果只是更新虚拟DOM, 页面是不会重绘的- Virtual DOM 算法的基本步骤 - 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中 - 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异 - 把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了- 进一步理解 - Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。 - 可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。","comments":true,"tags":[]},{"title":"React-Router","date":"2019-05-09T08:58:05.000Z","path":"2019/05/09/React-Router/","text":"这是一篇关于react-router的使用笔记以及参考教程 react-router的使用1. 关于url中#的作用: 学习: http://www.ruanyifeng.com/blog/2011/03/url_hash.html ‘#’代表网页中的一个位置。其右面的字符，就是该位置的标识符 改变#不触发网页重载 改变#会改变浏览器的访问历史 window.location.hash读取#值 window.onhashchange = func 监听hash改变 2. react-router github主页: https://github.com/ReactTraining/react-router 官网教程: https://github.com/reactjs/react-router-tutorial/(官方教程) 阮大大的教程参考: http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu 3. react-router库中的相关组件 包含的相关组件: Router: 路由器组件, 用来包含各个路由组件 Route: 路由组件, 注册路由 IndexRoute: 默认路由组件 hashHistory: 路由的切换由URL的hash变化决定，即URL的#部分发生变化 Link: 路由链接组件 Router: 路由器组件 属性: history={hashHistory} 用来监听浏览器地址栏的变化, 并将URL解析成一个地址对象，供React Router匹配 子组件: Route Route: 路由组件 属性1: path=”/xxx” 属性2: component={Xxx} 根路由组件: path=”/“的组件, 一般为App 子路由组件: 子配置的组件 IndexRoute: 默认路由 当父路由被请求时, 默认就会请求此路由组件 hashHistory 用于Router组件的history属性 作用: 为地址url生成?_k=hash, 用于内部保存对应的state Link: 路由链接 属性1: to=”/xxx” 属性2: activeClassName=”active” 4. 配置(从官方教程样例中拷贝)1* webpack配置: webpack.config.js module.exports = { //入口js entry: &apos;./index.js&apos;, //编译打包输出 output: { filename: &apos;bundle.js&apos;, publicPath: &apos;&apos; }, module: { //使用的loaders loaders: [ {test: /\\.js$/, exclude: /node_modules/, loader: &apos;babel-loader?presets[]=es2015&amp;presets[]=react&apos;} ] } } 12* 包配置: package.json { &quot;name&quot;: &quot;tutorial&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;start&quot;: &quot;webpack-dev-server --inline --content-base .&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: { &quot;react&quot;: &quot;^0.14.7&quot;, &quot;react-dom&quot;: &quot;^0.14.7&quot;, &quot;react-router&quot;: &quot;^2.0.0&quot; }, &quot;devDependencies&quot;: { &quot;babel-core&quot;: &quot;^6.5.1&quot;, &quot;babel-loader&quot;: &quot;^6.2.2&quot;, &quot;babel-preset-es2015&quot;: &quot;^6.5.0&quot;, &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;, &quot;http-server&quot;: &quot;^0.8.5&quot;, &quot;webpack&quot;: &quot;^1.12.13&quot;, &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot; } } 123```## 5. 编码 定义各个路由组件 About.js 12345import React from &apos;react&apos;function About() &#123; return &lt;div&gt;About组件内容&lt;/div&gt;&#125;export default About Home.js 12345import React from &apos;react&apos;function Home() &#123; return &lt;div&gt;Home组件内容2&lt;/div&gt;&#125;export default Home Repos.js 12345678import React, &#123;Component&#125; from &apos;react&apos;export default class Repos extends Component &#123; render() &#123; return ( &lt;div&gt;Repos组件&lt;/div&gt; ) &#125;&#125; 定义应用组件: App.js 1234567891011121314151617import React, &#123;Component&#125; from &apos;react&apos;import &#123;Link&#125; from &apos;react-router&apos;export default class App extends Component &#123; render() &#123; return ( &lt;div&gt; &lt;h2&gt;Hello, React Router!&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=&quot;/about&quot; activeClassName=&quot;active&quot;&gt;About2&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&quot;/repos&quot; activeClassName=&quot;active&quot;&gt;Repos2&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &#123;this.props.children&#125; &lt;/div&gt; ) &#125;&#125; 定义入口JS: index.js–&gt;渲染组件 1234567891011121314151617import React from &apos;react&apos;import &#123;render&#125; from &apos;react-dom&apos;import &#123;Router, Route, IndexRoute, hashHistory&#125; from &apos;react-router&apos;import App from &apos;./modules/App&apos;import About from &apos;./modules/About&apos;import Repos from &apos;./modules/Repos&apos;import Home from &apos;./modules/Home&apos;render(( &lt;Router history=&#123;hashHistory&#125;&gt; &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt; &lt;IndexRoute component=&#123;Home&#125;/&gt; &lt;Route path=&quot;/about&quot; component=&#123;About&#125;&gt;&lt;/Route&gt; &lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;&gt;&lt;/Route&gt; &lt;/Route&gt; &lt;/Router&gt;), document.getElementById(&apos;app&apos;)) 主页面: index.html 1234567&lt;style&gt; .active &#123; color: red; &#125;&lt;/style&gt;&lt;div id=app&gt;&lt;/div&gt;&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt; 12## 6. 传递请求参数 repo.js: repos组件下的分路由组件 1234567import React from &apos;react&apos;export default function (&#123;params&#125;) &#123; let &#123;username, repoName&#125; = params return ( &lt;div&gt;用户名:&#123;username&#125;, 仓库名:&#123;repoName&#125;&lt;/div&gt; )&#125; repos.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import React from &apos;react&apos;import NavLink from &apos;./NavLink&apos;export default class Repos extends React.Component &#123; constructor(props) &#123; super(props); this.state = &#123; repos: [ &#123;username: &apos;faceback&apos;, repoName: &apos;react&apos;&#125;, &#123;username: &apos;faceback&apos;, repoName: &apos;react-router&apos;&#125;, &#123;username: &apos;Angular&apos;, repoName: &apos;angular&apos;&#125;, &#123;username: &apos;Angular&apos;, repoName: &apos;angular-cli&apos;&#125; ] &#125;; this.handleSubmit = this.handleSubmit.bind(this) &#125; handleSubmit () &#123; const repos = this.state.repos repos.push(&#123; username: this.refs.username.value, repoName: this.refs.repoName.value &#125;) this.setState(&#123;repos&#125;) this.refs.username.value = &apos;&apos; this.refs.repoName.value = &apos;&apos; &#125; render() &#123; return ( &lt;div&gt; &lt;h2&gt;Repos&lt;/h2&gt; &lt;ul&gt; &#123; this.state.repos.map((repo, index) =&gt; &#123; const to = `/repos/$&#123;repo.username&#125;/$&#123;repo.repoName&#125;` return ( &lt;li key=&#123;index&#125;&gt; &lt;Link to=&#123;to&#125; activeClassName=&apos;active&apos;&gt;&#123;repo.repoName&#125;&lt;/Link&gt; &lt;/li&gt; ) &#125;) &#125; &lt;li&gt; &lt;form onSubmit=&#123;this.handleSubmit&#125;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;用户名&quot; ref=&apos;username&apos;/&gt; / &#123;&apos; &apos;&#125; &lt;input type=&quot;text&quot; placeholder=&quot;仓库名&quot; ref=&apos;repoName&apos;/&gt;&#123;&apos; &apos;&#125; &lt;button type=&quot;submit&quot;&gt;添加&lt;/button&gt; &lt;/form&gt; &lt;/li&gt; &lt;/ul&gt; &#123;this.props.children&#125; &lt;/div&gt; ); &#125;&#125; index.js: 配置路由 123&lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;&gt; &lt;Route path=&quot;/repos/:username/:repoName&quot; component=&#123;Repo&#125;/&gt;&lt;/Route&gt; 优化Link组件 NavLink.js 12345import React from &apos;react&apos;import &#123;Link&#125; from &apos;react-router&apos;export default function NavLink(props) &#123; return &lt;Link &#123;...props&#125; activeClassName=&quot;active&quot;/&gt;&#125; Repos.js 1&lt;NavLink to=&#123;to&#125;&gt;&#123;repo.repoName&#125;&lt;/NavLink&gt; 12","comments":true,"tags":[]},{"title":"数组去重和冒泡排序","date":"2019-03-12T11:23:35.000Z","path":"2019/03/12/数组去重和冒泡排序/","text":"数组排序和去重的两种实现方式 实现冒泡排序（小到大）123456789101112131415function sort(arr)&#123; for(var i=0;i&lt;arr.length;i++)&#123; for(var j=i+1;j&lt;arr.length;j++)&#123; if(arr[i]&gt;arr[j])&#123; var temp=arr[i]; arr[i]=arr[j]; arr[j]=temp; &#125; &#125; &#125; return arr;&#125;var arr=[3,4,2,1];sort(arr); 数组去重：高效率12345678910111213function duplicate(arr)&#123; var result=[],hash=&#123;&#125;; for(var i=0,element;(element=arr[i])!=null;i++)&#123; if(!hash[element])&#123; result.push(element); hash[element]=true; &#125; &#125; return result;&#125;var arr=[3,4,2,1,3,4];duplicate(arr);","comments":true,"tags":[]},{"title":"小白入坑体验","date":"2019-02-14T09:31:38.000Z","path":"2019/02/14/小白入坑体验/","text":"这是一个从入坑到入土的过程 记者问一位大爷说：老大爷，您保持年轻的秘诀是什么？ 大爷说：白天上班，夜晚加班，节假日值班，一天五包烟，天天吃泡面。 记者问：老大爷，您是干什么工作的？ 大爷说：我是程序员！ 记者：啊？？大爷您今年高寿？ 大爷：老子今年35！","comments":true,"tags":[]},{"title":"Hello World","date":"2019-02-14T06:46:21.000Z","path":"2019/02/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"tags":[]}]